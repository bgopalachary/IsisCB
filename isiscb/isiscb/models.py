from django.db import models
from django.contrib.auth.models import User
from languages import LANGUAGES


class CuratedMixin(models.Model):
    class Meta:
        abstract = True

    administrator_notes = models.TextField(help_text="""
    Curatorial discussion about the record.""")

    record_history = models.TextField(help_text="""
    Notes about the provenance of the information in this record. e.g. ‘supplied
    by the author,’ ‘imported from SHOT bibliography,’ ‘generated by crawling UC
    Press website’""")

    # This isn't very well documented, but Django has a built-in logging system
    #  for the admin interface: https://github.com/django/django/blob/master/django/contrib/admin/models.py
    created_on = models.DateTimeField(auto_now_add=True)
    created_by = models.ForeignKey(User)
    modified_on = models.DateTimeField(auto_now=True)
    modified_by = models.ForeignKey(User)


class AttributeMixin(models.Model):
    """
    Adds an ``attributes`` field, and methods for accessing related
    :class:`.Attribute`\s.
    """

    class Meta:
        abstract = True

    # Put this here rather than in the Attribute model, since both Citations
    #  and Authorities (and more?) should be able to have attributes.
    attributes = models.ManyToManyField('Attribute')

    def __getattr__(self, name):
        """
        If an instance has no attribute called ``name``, checks the
        ``attributes`` field for matching related :class:`.Attribute`\s.
        """

        try:    # Give the base class the first shot.
            return super(Citation, self).__getattr__(name)
        except AttributeError as E:
            # Look for ``name`` among related Attributes.
            queryset = self.attributes.filter(type_controlled=name)
            if queryset.count() == 1:
                return queryset[0].value
            elif querset.count() > 1:
                return [a.value for a in queryset]
            raise E     # No such attribute found.


class URIMixin(models.Model):
    """
    Provides a URI field, and associated methods.
    """

    class Meta:
        abstract = True

    uri = models.URLField()


class Language(models.Model):
    """
    Populate this using fixtures/language.json to load ISO 639-1 language codes.
    """

    id = models.CharField(max_length=2, primary_key=True,
                          help_text="""Language code (e.g. ``en``).""")

    name = models.CharField(max_length=255)


class Citation(models.Model, CuratedMixin, AttributeMixin, URIMixin):
    id = models.CharField(max_length=200, primary_key=True, help_text="""
    In the format CBB000000000 (CBB followed by a number padded with zeros to
    be nine digits).""")

    title = models.CharField(max_length=255, help_text="""
    The name to be used to identify the resource. For reviews that traditionally
    have no title, this should be added as something like “[Review of Title
    (Year) by Author]”.""")

    description = models.TextField(help_text="""
    Used for additional bibliographic description, such as content summary. For
    abstracts use the ‘Abstract’ field.""")

    BOOK = 'BO'
    ARTICLE = 'AR'
    CHAPTER = 'CH'
    REVIEW = 'RE'
    ESSAY_REVIEW = 'ES'
    THESIS = 'TH'
    EVENT = 'EV'
    PRESENTATION = 'PR'
    INTERACTIVE = 'IN'
    WEBSITE = 'WE'
    APPLICATION = 'AP'

    TYPE_CHOICES = (
        (BOOK, 'Book'),
        (ARTICLE, 'Article'),
        (CHAPTER, 'Chapter'),
        (REVIEW, 'Review'),
        (ESSAY_REVIEW, 'Essay Review'),
        (THESIS, 'Thesis'),
        (EVENT, 'Event'),
        (PRESENTATION, 'Presentation'),
        (INTERACTIVE, 'Interactive Resource'),
        (WEBSITE, 'Website'),
        (APPLICATION, 'Application'),
    )

    type_controlled = models.CharField(max_length=2, choices=TYPE_CHOICES,
                                       help_text="""
    This list can be extended to the resource types specified by Doublin Core
    Recource Types http://dublincore.org/documents/resource-typelist/""")

    abstract = models.TextField(help_text="""
    Abstract or detailed summaries of a work."""

    edition_details = models.TextField(help_text="""
    Use for describing the edition or version of the resource. Include names of
    additional contributors if necessary for clarification (such as translators,
    introduction by, etc). Always, use relationship table to list contributors
    (even if they are specified here).""")

    physical_details = models.CharField(help_text="""
    For describing the physical description of the resource. Use whatever
    information is appropriate for the type of resource.""")

    # Storing this in the model would be kind of hacky. This will make it easier
    #  to do things like sort or filter by language.
    language = models.ManyToManyField(help_text="""
    Language of the resource. Multiple languages can be specified.""")


    part_details = models.OneToOneField(PartDetails, help_text="""
    New field: contains volume, issue, page information for works that are parts
    of larger works.""")

    # url = models.URLField()   # What is this for?

    related_citations = models.ManyToManyField(Citation, through='CCRelation')
    related_authorities = models.ManyToManyField(Citation, through='ACRelation')

    # Not sure if this is the right approach? The type of relationship is set
    #  using a controlled vocabulary in the relationship model itself.
    #  Presumably it should be extensible, so hard-coding these types here seems
    #  limiting. If we want to display different types in different ways in our
    #  views, we can separate them out using filters.

    # associated objects:
    # author_editor = models.ManyToManyField(Authority, through='ACRelation')
    # publication_date = models.OneToOneField(Attribute)
    # publisher = models.ManyToManyField(Authority, through='ACRelation')
    # book_series = models.ManyToManyField(Citation, through='CCRelation')
    # journal_name = models.ManyToManyField(Authority, through='ACRelation')
    # reviewed_books = models.ManyToManyField(Citation, through='CCRelation')
    # source_book_for_chapter = models.ManyToManyField(Citation, through='CCRelation')
    # what is this?
    # subject: models.ManyToManyField(Authority, through='ACRelation')

    # full_citation_from_various = models.CharField()   # Unwanted

    EXTERNAL_PROOF = 'EX'
    QUERY_PROOF = 'QU'
    HOLD = 'HO'
    RLG_CORRECT = 'RC'
    ACTION_CHOICES = (
        (EXTERNAL_PROOF, 'External Proof'),
        (QUERY_PROOF, 'Query Proof'),
        (HOLD, 'Hold'),
        (RLG_CORRECT, 'RLG Correct')
    )

    record_action = models.CharField(max_length=2, choices=ACTION_CHOICES)
    """
    Used to track the record through curation process.
    """

    CONTENT_LIST = 'CL'
    SOURCE_BOOK = 'SB'
    SCOPE = 'SC'
    FIX_RECORD = 'FX'
    DUPLICATE = 'DP'
    STATUS_CHOICES = (
        (CONTENT_LIST, 'Content List'),
        (SOURCE_BOOK, 'Source Book'),
        (SCOPE, 'Scope'),
        (FIX_RECORD, 'Fix Record'),
        (DUPLICATE, 'Duplicate')
    )
    status_of_record = models.CharField(max_length=2, choices=STATUS_CHOICES)
    """
    Used to control printing in the paper volume of the CB.
    """


class Authority(models.Model, CuratedMixin, URIMixin):
    id = models.CharField(max_length=200, primary_key=True, help_text="""
    In the format CBB000000000 (CBB followed by a number padded with zeros to be
    nine digits).""")

    name = models.Charfield(max_length=255, help_text="""
    Name, title, or other main term for the authority as will be displayed.""")

    description = models.TextField(help_text="""
    A brief description that will be displayed to help identify the authority.
    Such as, brief bio or a scope note. For classification terms will be text
    like “Classification term from the XXX classification schema.’""")

    PERSON = 'PE'
    INSTITUTION = 'IN'
    TIME_PERIOD = 'TI'
    GEOGRAPHIC_TERM = 'GE'
    SERIAL_PUBLICATION = 'SE'
    CLASSIFICATION_TERM = 'CT'
    CONCEPT = 'CO'
    CREATIVE_WORK = 'CW'
    EVENT = 'EV'
    TYPE_CHOICES = (
        (PERSON, 'Person'),
        (INSTITUTION, 'Institution'),
        (TIME_PERIOD, 'Time Period'),
        (GEOGRAPHIC_TERM, 'Geographic Term'),
        (SERIAL_PUBLICATION, 'Serial Publication'),
        (CLASSIFICATION_TERM, 'Classification Term'),
        (CONCEPT, 'Concept'),
        (CREATIVE_WORK, 'Creative Work'),
        (EVENT, 'Event')
    )
    type_controlled = models.CharField(max_length=2, choices=TYPE_CHOICES,
                                       help_text="""
    Specifies authority type. Each authority thema has its own list of
    controlled type vocabulary.""")

    # QUESTION: How is this related to "tagging" that users can do?
    # controlled, values: SPW, Neu, MW, SHOT
    classification_system = models.CharField()
    classification_code = models.CharField()
    classification_hierarchy = models.CharField()

    # QUESTION: These seems specific to the PERSON type. Should we be modeling
    #  Authority types separately? E.g. each type could be a child class of
    #  Authority, and we can preserve generic relations to Attributes using
    #  multi-table inheritance. Another reason to do this is that we want
    #  users to be able to "claim" their PERSON record -- this is much more
    #  straightforward with separate models.
    personal_name_last = models.CharField()
    personal_name_first = models.CharField()
    personal_name_suffix = models.CharField()
    personal_name_preferred_form = models.CharField()


# QUESTION: Can relations have attributes?
class ACRelation(models.Model, CuratedMixin, URIMixin):
    id = models.CharField(max_length=200, primary_key=True)
    citation = models.ForeignKey(Citation)
    authority = models.ForeignKey(Authority)

    name = models.CharField()
    description = models.TextField()
    # the following two should come from a controlled vocabulary
    type_controlled = models.CharField()
    type_broad_controlled = models.CharField()
    type_free = models.CharField()

    data_source_field = models.CharField()
    data_display_order = models.CharField()
    confidence_measure = models.FloatField(validators = [MinValueValidator(0), MaxValueValidator(1)])
    relationship_weight = models.FloatField(validators = [MinValueValidator(0), MaxValueValidator(2)])

    # why are the following in orange?
    journal_id_old = models.CharField()
    thesaurus_id_old = models.CharField()
    data_work_1 = models.CharField()
    citation_8_digit_id = models.CharField()
    authority_8_digit_id = models.CharField()
    record_id_old = models.CharField()

    name_format_wester_asian_etc = models.CharField()
    name_as_entered = models.CharField()
    name_for_display_in_citation = models.CharField()
    last = models.CharField()
    first = models.CharField()
    suffix = models.CharField()

    classification_code = models.CharField()

    # AuthorityID of the record that succeeds this
    # record if this record has become Inactive.
    redirect_to = models.CharField()


class CCRelation(models.Model, CuratedMixin, URIMixin):
    id = models.CharField(max_length=200, primary_key=True)
    # todo


class Attribute(models.Model, CuratedMixin, URIMixin):
    id = models.CharField(max_length=200, primary_key=True)

    # I'm a little unclear about how this will work with non-string data.
    value = models.CharField(max_length=255)
    type_controlled = models.CharField()
    type_controlled_broad = models.CharField(blank=True)
    type_free = models.CharField(max_length=255, blank=True)

    date_iso = models.DateField(blank=True)
    place = models.ForeignKey('Place', blank=True, null=True)


class PartDetails(models.Model):
    """
    New field: contains volume, issue, page information for works that are parts
    of larger works.
    """
    volume = models.CharField(max_length=255, blank=True)
    volume_free_text = models.CharField(max_length=255, blank=True)
    volume_begin = models.IntegerField(blank=True, null=True)
    volume_end = models.IntegerField(blank=True, null=True)
    issue_free_text = models.CharField(max_length=255, blank=True)
    issue_begin = models.IntegerField(blank=True, null=True)
    issue_end = models.IntegerField(blank=True, null=True)
    pages_free_text = models.CharField(max_length=255, blank=True)
    page_begin = models.IntegerField(blank=True, null=True)
    page_end = models.IntegerField(blank=True, null=True)

    sort_order = models.IntegerField(default=0, help_text="""
    New field: provides a sort order for works that are part of a larger work.
    """)


class Place(models.Model):
    name = models.CharField(max_length=255)
    gis_location = models.ForeignKey('Location', blank=True, null=True)
    gis_schema = models.ForeignKey('LocationSchema', blank=True, null=True)


class LocationSchema(models.Model):
    """
    Represents an SRID.
    """

    name = models.CharField(max_length=255)


class Location(models.Model):
    """
    SRID-agnostic decimal coordinate.
    """

    NORTH = 'N'
    SOUTH = 'S'
    EAST = 'E'
    WEST = 'W'
    LAT_CARDINAL = (
        (NORTH, 'North'),
        (SOUTH, 'South')
    )
    LON_CARDINAL = (
        (EAST, 'East'),
        (WEST, 'West')
    )
    latitude = models.FloatField()
    latitude_direction = models.CharField(max_length=1, options=LAT_CARDINAL)

    longitude = models.FloatField()
    longitude_direction = models.CharField(max_length=1, options=LON_CARDINAL)
